{"version":3,"sources":["components/tableHeader/TableHeader.jsx","components/tableRow/TableRow.jsx","components/table/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","scope","this","props","mentor","students","map","v","i","key","href","concat","student","target","rel","Component","TableRow","task","link","name","isChecked","_","includes","tasks","tdClass","status","toLowerCase","replace","tdText","className","Table","_this","tableHeader_TableHeader","tableRow_TableRow","App","state","selectedMentor","JSON","parse","localStorage","getItem","handleChange","find","loadedData","mentors","git","value","setState","setItem","stringify","_this2","fetch","then","response","json","data","catch","err","console","log","react_select_esm","options","label","surname","onChange","placeholder","table_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8da1e824.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TableHeader extends Component {\n  render() {\n    return (\n      <tr>\n        <th scope=\"row\"></th>\n        {\n          this.props.mentor.students.map((v, i) => {\n            return (\n              <td key={i}><a href={`https://github.com/${v.student}`} target=\"_blank\" rel=\"noopener noreferrer\">{v.student}</a></td>\n            )\n          })\n        }\n      </tr>\n    )\n  }\n}\n\nexport default TableHeader;\n","import React, {Component} from 'react';\nimport _ from 'lodash';\n\nclass TableRow extends Component {\n  render() {\n    const { task } = this.props;\n    \n    return (\n      <tr>\n        <th scope=\"row\"><a href={task.link} target=\"_blank\" rel=\"noopener noreferrer\">{task.name}</a></th>\n        {\n          this.props.mentor.students.map((v, i) => {\n            const isChecked = _.includes(v.tasks, task.name);\n\n            const tdClass = isChecked \n              ? 'checked' \n              : task.status === 'Checked'\n                ? 'no-mark'\n                : task.status.toLowerCase().replace(' ', '_');\n                \n            const tdText = isChecked \n              ? 'Checked' \n              : task.status === 'Checked'\n                ? 'No mark'\n                : task.status;\n            \n            return (\n              <td key={i * 100} className={tdClass}>{tdText}</td>\n            )\n          })\n        }\n      </tr>\n    );\n  }\n}\n\nexport default TableRow;\n","import React, {Component} from 'react';\n\nimport './table.scss';\nimport TableHeader from '../tableHeader/TableHeader';\nimport TableRow from '../tableRow/TableRow';\n\nclass Table extends Component {  \n  render() {\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"table table-striped table-bordered table-sm\">\n          <tbody>\n            <TableHeader mentor={this.props.mentor}/>\n            {\n              this.props.tasks.map((v, i) => {\n                return <TableRow key={i} task={v} mentor={this.props.mentor} />\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport _ from 'lodash';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from './components/table/Table';\n\nclass App extends Component {\n  state = {\n    selectedMentor: JSON.parse(localStorage.getItem('mentor')) || null,\n  }\n  \n  handleChange = (selectedMentor) => {\n    const mentor = _.find(this.state.loadedData.mentors, {git: selectedMentor.value})\n    this.setState({ selectedMentor: mentor });\n    localStorage.setItem('mentor', JSON.stringify(mentor));\n  }\n  \n  componentDidMount() {\n    fetch('./files/json/data.json')\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({\n          loadedData: data,\n        });\n      })\n      .catch(err => { console.log(err) });\n  }\n  \n  render() {\n    \n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"input-group mb-3\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">Ментор:</span>\n              </div>\n              {\n                this.state.loadedData && \n                <Select \n                  options={this.state.loadedData.mentors.map((v) => {\n                    return {\n                      label: `${v.name} ${v.surname}`,\n                      value: v.git,\n                    }\n                  })}\n                  onChange={this.handleChange}\n                  className=\"react-select\"\n                  placeholder=\"Выбрать ментора из списка\"\n                  value={\n                    {\n                      label: this.state.selectedMentor ? `${this.state.selectedMentor.name} ${this.state.selectedMentor.surname}` : '',\n                      value: this.state.selectedMentor ? this.state.selectedMentor.name.git : '',\n                    }\n                  }\n                />\n              }\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {this.state.selectedMentor && this.state.loadedData && <Table tasks={this.state.loadedData.tasks} mentor={this.state.selectedMentor} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/style.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <App />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}